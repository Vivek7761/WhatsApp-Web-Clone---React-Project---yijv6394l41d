[{"E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\index.js":"1","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\App.js":"2","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\modules\\login\\index.js":"3","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\components\\ConversationComponent.js":"4","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\components\\ContactListComponent.js":"5","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\mockData.js":"6","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\managers\\httpManager.js":"7","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\managers\\cookieManager.js":"8","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\utility\\index.js":"9"},{"size":276,"mtime":1670043144997,"results":"10","hashOfConfig":"11"},{"size":1626,"mtime":1670043144906,"results":"12","hashOfConfig":"11"},{"size":2769,"mtime":1670043145324,"results":"13","hashOfConfig":"11"},{"size":4482,"mtime":1670043145154,"results":"14","hashOfConfig":"11"},{"size":4614,"mtime":1670043145105,"results":"15","hashOfConfig":"11"},{"size":1451,"mtime":1670043145046,"results":"16","hashOfConfig":"11"},{"size":786,"mtime":1670043145265,"results":"17","hashOfConfig":"11"},{"size":341,"mtime":1670043145215,"results":"18","hashOfConfig":"11"},{"size":327,"mtime":1670043145408,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"1h3ezwq",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\index.js",["41"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport LoginComponent from \"./modules/login\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <LoginComponent />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\App.js",[],"E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\modules\\login\\index.js",[],"E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\components\\ConversationComponent.js",["42","43"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { SearchContainer, SearchInput } from \"./ContactListComponent\";\nimport Picker from \"emoji-picker-react\";\nimport { messagesList } from \"../mockData\";\nimport httpManager from \"../managers/httpManager\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 3;\n  height: 100%;\n  width: 100%;\n  background: #f6f7f8;\n`;\n\nconst ProfileHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #ededed;\n  padding: 10px;\n  align-items: center;\n`;\n\nconst ProfileInfo = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #ededed;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst ProfileImage = styled.img`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n`;\nconst ContactName = styled.span`\n  font-size: 16px;\n  color: black;\n`;\n\nconst ChatBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #f0f0f0;\n  padding: 10px;\n  align-items: center;\n  bottom: 0;\n`;\nconst MessageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  overflow-y: auto;\n  background: #e5ddd6;\n`;\nconst MessageDiv = styled.div`\n  display: flex;\n  justify-content: ${(props) => (props.isYours ? \"flex-end\" : \"flex-start\")};\n  margin: 5px 15px;\n`;\nconst Message = styled.div`\n  background: ${(props) => (props.isYours ? \"#daf8cb\" : \"white\")};\n  padding: 8px 10px;\n  border-radius: 4px;\n  max-width: 50%;\n  color: #303030;\n  font-size: 14px;\n`;\nconst EmojiImage = styled.img`\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  opacity: 0.4;\n  cursor: pointer;\n`;\nfunction ConversationComponent(props) {\n  const { selectedChat, userInfo, refreshContactList } = props;\n  const [text, setText] = useState(\"\");\n  const [pickerVisible, togglePicker] = useState(false);\n  const [messageList, setMessageList] = useState([]);\n\n  useEffect(() => {\n    setMessageList(selectedChat.channelData.messages);\n  }, [selectedChat]);\n\n  const onEnterPress = async (event) => {\n    let channelId = selectedChat.channelData._id;\n    if (event.key === \"Enter\") {\n      if (!messageList || !messageList.length) {\n        const channelUsers = [\n          {\n            email: userInfo.email,\n            name: userInfo.name,\n            profilePic: userInfo.imageUrl,\n          },\n          {\n            email: selectedChat.otherUser.email,\n            name: selectedChat.otherUser.name,\n            profilePic: selectedChat.otherUser.profilePic,\n          },\n        ];\n        const channelResponse = await httpManager.createChannel({\n          channelUsers,\n        });\n        channelId = channelResponse.data.responseData._id;\n      }\n      refreshContactList();\n      const messages = [...messageList];\n      const msgReqData = {\n        text,\n        senderEmail: userInfo.email,\n        addedOn: new Date().getTime(),\n      };\n      const messageResponse = await httpManager.sendMessage({\n        channelId,\n        messages: msgReqData,\n      });\n      messages.push(msgReqData);\n      setMessageList(messages);\n      setText(\"\");\n    }\n  };\n  return (\n    <Container>\n      <ProfileHeader>\n        <ProfileInfo>\n          <ProfileImage src={selectedChat.otherUser.profilePic} />\n          <ContactName>{selectedChat.otherUser.name}</ContactName>\n        </ProfileInfo>\n      </ProfileHeader>\n      <MessageContainer>\n        {messageList?.map((messageData) => (\n          <MessageDiv isYours={messageData.senderEmail === userInfo.email}>\n            <Message isYours={messageData.senderEmail === userInfo.email}>\n              {[messageData.text]}\n            </Message>\n          </MessageDiv>\n        ))}\n      </MessageContainer>\n\n      <ChatBox>\n        <SearchContainer>\n          {pickerVisible && (\n            <Picker\n              pickerStyle={{ position: \"absolute\", bottom: \"60px\" }}\n              onEmojiClick={(e, emoji) => {\n                setText(text + emoji.emoji);\n                togglePicker(false);\n              }}\n            />\n          )}\n          <EmojiImage\n            src={\"/whatsapp-clone/data.svg\"}\n            onClick={() => togglePicker((pickerVisible) => !pickerVisible)}\n          />\n          <SearchInput\n            placeholder=\"Type a message\"\n            value={text}\n            onKeyDown={onEnterPress}\n            onChange={(e) => setText(e.target.value)}\n          />\n        </SearchContainer>\n      </ChatBox>\n    </Container>\n  );\n}\n\nexport default ConversationComponent;\n","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\components\\ContactListComponent.js",["44","45","46","47"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport httpManager from \"../managers/httpManager\";\nimport { contactList } from \"../mockData\";\nimport utility from \"../utility\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1.6;\n  height: 100%;\n  width: 100%;\n  border-right: 1px solid #dadada;\n`;\n\nconst ProfileInfoDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #ededed;\n  padding: 10px;\n`;\n\nconst SearchBox = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: #f6f6f6;\n  padding: 10px;\n`;\nexport const SearchContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  background: white;\n  border-radius: 16px;\n  width: 100%;\n  padding: 5px 10px;\n  gap: 10px;\n`;\nconst SearchIcon = styled.img`\n  width: 28px;\n  height: 28px;\n`;\nexport const SearchInput = styled.input`\n  width: 100%;\n  outline: none;\n  border: none;\n  font-size: 15px;\n`;\n\nconst ContactItem = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  border-bottom: 1px solid #f2f2f2;\n  background: white;\n  cursor: pointer;\n\n  :hover {\n    background: #ebebeb;\n  }\n`;\nconst ContactInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 12px;\n`;\n\nconst ContactName = styled.span`\n  width: 100%;\n  font-size: 16px;\n  color: black;\n`;\n\nconst MessageText = styled.span`\n  width: 100%;\n  font-size: 14px;\n  margin-top: 3px;\n  color: rgba(0, 0, 0, 0.8);\n`;\n\nconst MessageTime = styled.span`\n  font-size: 12px;\n  margin-right: 10px;\n  color: rgba(0, 0, 0, 0.45);\n  white-space: nowrap;\n`;\n\nconst ProfileImage = styled.img`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n`;\nconst ProfileIcon = styled(ProfileImage)`\n  width: 38px;\n  height: 38px;\n  border-radius: 50%;\n  margin-left: 12px;\n  margin-top: 15px;\n  margin-bottom: 15px;\n  object-fit: cover;\n`;\nconst SearchResults = styled.div`\n  width: 100%;\n  height: 100px;\n`;\n\nconst ContactComponent = (props) => {\n  const { userData, setChat, userInfo } = props;\n  const [searchResult, setSearchResult] = useState();\n\n  const otherUser =\n    userData.channelUsers?.find(\n      (userObj) => userObj.email !== userInfo.email\n    ) || userData;\n\n  const lastMessage =\n    userData.messages && userData.messages.length\n      ? userData.messages[userData.messages.length - 1]\n      : {};\n      \n  return (\n    <ContactItem onClick={() => setChat({ channelData: userData, otherUser })}>\n      <ProfileIcon src={otherUser?.profilePic} />\n      <ContactInfo>\n        <ContactName>{otherUser?.name}</ContactName>\n        <MessageText>{lastMessage?.text}</MessageText>\n      </ContactInfo>\n      <MessageTime>\n        {\" \"}\n        {lastMessage && new Date(lastMessage?.addedOn).getUTCDate()}\n      </MessageTime>\n    </ContactItem>\n  );\n};\n\nfunction ContactListComponent(props) {\n  const { userInfo, refreshContactList } = props;\n  const [searchString, setSearchString] = useState(\"\");\n  const [searchResult, setSearchResult] = useState(\"\");\n  const [contactList, setContactList] = useState([]);\n\n  const refreshContacts = async () => {\n    const contactListData = await httpManager.getChannelList(userInfo.email);\n    setContactList(contactListData.data.responseData);\n    setSearchString();\n    setSearchResult();\n  };\n\n  useEffect(() => {\n    refreshContacts();\n  }, [refreshContactList]);\n\n  const onSearchTextChanged = async (searchText) => {\n    setSearchString(searchText);\n    if (!utility.validateEmail(searchText)) return;\n\n    const userData = await httpManager.searchUser(searchText);\n    if (userData.data?.success) setSearchResult(userData.data.responseData);\n  };\n\n  return (\n    <Container>\n      <ProfileInfoDiv>\n        <ProfileImage\n          src={userInfo.imageUrl || \"/whatsapp-clone/profile/theindiandev.jpeg\"}\n        />\n      </ProfileInfoDiv>\n      <SearchBox>\n        <SearchContainer>\n          <SearchIcon src={\"/whatsapp-clone/search-icon.svg\"} />\n          <SearchInput\n            placeholder=\"Search or start new chat\"\n            value={searchString}\n            onChange={(e) => onSearchTextChanged(e.target.value)}\n          />\n        </SearchContainer>\n      </SearchBox>\n      {searchResult && (\n        <SearchResults>\n          <ContactComponent userData={searchResult} setChat={props.setChat} />\n        </SearchResults>\n      )}\n      {contactList.map((userData) => (\n        <ContactComponent\n          userData={userData}\n          setChat={props.setChat}\n          userInfo={userInfo}\n        />\n      ))}\n    </Container>\n  );\n}\n\nexport default ContactListComponent;\n","E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\mockData.js",[],"E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\managers\\httpManager.js",[],"E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\managers\\cookieManager.js",[],"E:\\WhatsApp-Web-Clone---React-Project---yijv6394l41d\\client\\src\\utility\\index.js",[],{"ruleId":"48","severity":1,"message":"49","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":11},{"ruleId":"48","severity":1,"message":"52","line":5,"column":10,"nodeType":"50","messageId":"51","endLine":5,"endColumn":22},{"ruleId":"48","severity":1,"message":"53","line":116,"column":13,"nodeType":"50","messageId":"51","endLine":116,"endColumn":28},{"ruleId":"48","severity":1,"message":"54","line":4,"column":10,"nodeType":"50","messageId":"51","endLine":4,"endColumn":21},{"ruleId":"48","severity":1,"message":"55","line":110,"column":10,"nodeType":"50","messageId":"51","endLine":110,"endColumn":22},{"ruleId":"48","severity":1,"message":"56","line":110,"column":24,"nodeType":"50","messageId":"51","endLine":110,"endColumn":39},{"ruleId":"57","severity":1,"message":"58","line":152,"column":6,"nodeType":"59","endLine":152,"endColumn":26,"suggestions":"60"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'messagesList' is defined but never used.","'messageResponse' is assigned a value but never used.","'contactList' is defined but never used.","'searchResult' is assigned a value but never used.","'setSearchResult' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshContacts'. Either include it or remove the dependency array.","ArrayExpression",["61"],{"desc":"62","fix":"63"},"Update the dependencies array to be: [refreshContactList, refreshContacts]",{"range":"64","text":"65"},[3371,3391],"[refreshContactList, refreshContacts]"]